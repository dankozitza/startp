Project 7 Tests
Created by Daniel Kozitza
account number cs301145
CSCI 301 section 2
Due 10/30/2015

csci2>
csci2>pwd
/export/home/cs301/cs301145/projects/csci301_7
csci2>

Testing empty file.

csci2>
csci2>cat tests/empty_file_test
csci2>
csci2>./infixcalc tests/empty_file_test
csci2>

Testing Infxcalc::evaluate and Infxcalc::place when given invalid input.

csci2>
csci2>cat tests/invalid_expressions_test
t

2147483647
(
12c
csci2>
csci2>./infixcalc tests/invalid_expressions_test
Expression: `t`
Infxcalc::place: `t` is not a valid operator.
Result: invalid expression

Expression: ``
Result: invalid expression

Expression: `2147483647`
Infxcalc: In expresion `2147483647`: Token `214748364` excedes token capacity.
Result: invalid expression

Expression: `(`
Infxcalc: Found delimiter `` when expecting delimiter `)`.
Result: invalid expression

Expression: `12c`
Infxcalc::place: `12c` is not a valid operand.
Result: invalid expression

csci2>

Testing Infxcalc::evaluate, Infxcalc::place, and Infxcalc::apply on valid three
token expressions. One expression for each operator.

csci2>
csci2>cat tests/operators_test
1 + 2
1 - 2
1 * 2
1 / 2
csci2>
csci2>./infixcalc tests/operators_test
Expression: `1 + 2`
Result: `3`

Expression: `1 - 2`
Result: `-1`

Expression: `1 * 2`
Result: `2`

Expression: `1 / 2`
Result: `0`

csci2>

Testing key functionality in Infxcalc::evaluate for handling precedence.

csci2>
csci2>cat tests/precedence_test
1 + 2 / 3
1 * 2 + 3
csci2>
csci2>./infixcalc tests/precedence_test
Expression: `1 + 2 / 3`
Result: `1`

Expression: `1 * 2 + 3`
Result: `5`

csci2>

Testing expression with extra spaces before, between, and after tokens.

csci2>
csci2>cat tests/spacing_test
   999         +    1
csci2>
csci2>./infixcalc tests/spacing_test
Expression: `   999         +    1   `
Result: `1000`

csci2>

Testing negative operand.

csci2>
csci2>cat tests/negative_operand_test
-5000 * 5
csci2>
csci2>./infixcalc tests/negative_operand_test
Expression: `-5000 * 5`
Result: `-25000`

csci2>

Testing key functionality in Infxcalc::evaluate for handling nested equations.

csci2>
csci2>cat tests/nesting_test
(1 + 2)
1 * (2 + 3)
(((1 + 2)))
(1 + 2) * 3
csci2>
csci2>./infixcalc tests/nesting_test
Expression: `(1 + 2)`
Result: `3`

Expression: `1 * (2 + 3)`
Result: `5`

Expression: `(((1 + 2)))`
Result: `3`

Expression: `(1 + 2) * 3`
Result: `9`

csci2>

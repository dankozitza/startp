Project 7 Design Document
Created by Daniel Kozitza
account number cs301145
CSCI 301 section 2
Due 10/30/2015

Introduction:

   This program, infixcalc, takes one argument from the command line (a file 
name) and reads the file evaluating each line as if it were an infix arithmetic 
expression. For example the expression '7 + 5' would equal '12'. It is capable 
of reading positive and negative integers up to 9 digits long and can apply 
addition, subtraction, multiplication, and division operations on them.

Data Structures:

   The main data structures being used are two linked stacks. The stack 
implementation i used is unique because it is capable of storing char or long 
types. Rather than have two seperate stack implementations i combined them into 
one to reduce my LOC. The two stacks are used to store operators and operands 
during the evaluation process. Another data structure used is a dynamic char 
array used to hold an expression. This char array is reallocated when needed so 
there is no maximum size for an expression.

Functions:

   In the client program: The append function is used to add a character to a 
char array. If the array has reached max size it is reallocated. There are 
three primary functions in the Infxcalc object. The first, evaluate, does most 
of the work. It reads the expression as a char array evaluating each token as 
it goes. The second, place, takes a token and places it in the appropriate 
stack. The third, apply, attempts to apply an operator from the stack to two 
operands from the stack. There are three primary functions in the L_Stack 
function. The first, push, takes either an operator or operand and places it on 
the top of the stack. The second, pop_c, removes and returns the top item from 
the list as a char. The third, pop_l, removes and returns the top item from the 
list as a long.

The main program:

   The main program first creates an Infxcalc object. It then handles the 
command line arguments, opens the file, reads the contents, and forms 
expressions as char arrays. The expressions are passed to the Infxcalc object 
and the result is printed. It also handles the dynamic allocation of the 
expressions array.
